#pragma once

$INCLUDES

/**
 * \brief contains all configurations options for PSL
 *
 * \details see `settings.json` to see what to specialize.
 */
namespace psl::config
{
#if defined(DEBUG)
	constexpr bool is_debug = true;
#else
	constexpr bool is_debug = false;
#endif
	constexpr bool is_release = !is_debug;

	/**
	 * \brief exception handling strategy options
	 *
	 */
	enum class exceptions_handling
	{
		EXCEPTIONS = 0,
		ASSERTS	   = 1,
		NONE	   = 2
	};
	
	/**
	 * \brief How to handle errors detected at runtime
	 * \details This setting allows the behaviour of runtime errors to be set. Note that even with full exceptions
	 * settings enabled, some errors will only present themselves as asserts. It is also possible to have the exceptions
	 * as asserts, while the traditional asserts are disabled. This means asserts will still happen, but only in
	 * exceptional scenarios.
	 *
	 */
	constexpr static exceptions_handling errors_strategy_v = exceptions_handling::$!ERRORS_STRATEGY;
	constexpr static bool exceptions					   = errors_strategy_v == exceptions_handling::EXCEPTIONS;
	constexpr static bool exceptions_as_asserts			   = errors_strategy_v == exceptions_handling::ASSERTS;

	constexpr static bool asserts = $ASSERTS;

	/**
	 * \brief tracks implementation errors on the part of the programmer
	 * \details unlike the previous exception handling, which is meant to protect against runtime errors,
	 * this variation is meant to check for errors in contract implementation. Most commonly this is used
	 * when inheriting from polymorphic base types
	 *
	 */
	constexpr static exceptions_handling implementation_errors_strategy_v = exceptions_handling::$!IMPLEMENTATION_ERRORS_STRATEGY;
	constexpr static bool implementation_exceptions =
		implementation_errors_strategy_v == exceptions_handling::EXCEPTIONS;
	constexpr static bool implementation_asserts = implementation_errors_strategy_v == exceptions_handling::ASSERTS;
	
	/**
	 * \brief Default memory resource that will be used by containers, or anything needed allocations.
	 * \details Can be used to override the `memory_resource` used by most collection type classes. Be mindful that the
	 * new resource does need to adhere to the traits.
	 */
	using default_memory_resource_t = $DEFAULT_MEMORY_RESOURCE;
	
	/**
	 * \brief Default allocator to use by any API that exposes allocator usage.
	 * \details Note that even though yuo can swap allocators out, their traits still have to work for every collection
	 * out there.
	 */
	using default_allocator_t = $DEFAULT_ALLOCATOR;

	/**
	 * \brief Default random number generator
	 */
	using default_rng_generator_t = $DEFAULT_RNG_GENERATOR;
} // namespace psl::config
